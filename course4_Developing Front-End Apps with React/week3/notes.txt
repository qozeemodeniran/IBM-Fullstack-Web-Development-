***************HOOKS*******************
what are hooks? -   simpler way to encapsulate stateful behavior and side effects in UIs.
- introdduce in feb 2019
- better sructure and clearer code.
- regular js functions
- enables use of context or state.
- can be used without classes
- allows to hook into function components.

why hooks? 
- solved the wrapper complexity, unimaginable size of components, and confusing classes problems caused by class components.
- enables fxn components to access state and other react fxns
- helps create simpler code (without classes)
- can be customized.  

Advantages of using hook
- readability
- lessr code
- optimized component
- writing functional component with states
- easy writing of compex components
- easy handling of logics and events in functional component
- performance boost with functional component

Best practises for using hooks
- only called from inside react function components
- only called at top level of a component
- cannot be conditional
- requires node 6 or above.
- requires npm 5.2 or above
- uses create-react-app tool from runnong react app.

standard hooks
- useState: adds state to a function
- useEffect: manages side effects
- useContext: manages context changes
- useReducer: manages redux state and changes.

custom react hook
- allows adding special unique functionality to react application.
- names with 'use' prefix
- composed of one or multiple hooks
- reusable, can be broken into smaller hook.
- testable.

********************************FORMS***********************************
what are forms?
- enables users interact witht the webpage
- handles data using components
- stores data in component state.
- uses event handlers to control changes and to update the state of a variable

handling form elements
- form elements maintain their own state in html
- form elements are kept in state property of components in react.

form validation
- get form values
- manage form state
- validate form on the fly.
- show validation messages.

types of input
1. uncontrolled: browser handles most of the form elements and collect data via react's change events.
    - dropped using a render function.
    - browser handles for elements
    - manages own's values in input's DOM node.
    - updates elements when input value changes
    - uses Ref function to get fomr values form DOM

2. controlled: use react to fully controll the elements by setting and updating input value directly.
    - code is written to manage values explicitly.
    - create state to hold, update and display value.
    - uses functions to govern the passing of data
    - better control over fomr elements and data
    - props take current value and notifies changes.
    - changes are controlled by parent component

react hook form
- for creating web forms
- reduces codes
- uses ref function to control forms inputs
- installed using 'install react-hook-form'

Advantages of using react hook form
- reduces numbers of re-renders
- zero dependencies (tiny size)
- intuitive API (uses constraint-based validation)
- smooth integration with UI libraries
- mounts components faster to the page 'cos of less overhead.

*********************REDUX - 04/25/2023***********************
Redux -   a state management library
- follows a FLUX pattern architecture
- handles state changes
- adopted when components number are high
- can be used with other libraries but commonly used in react.

WHY REDUX?
- solves the problem of managing large apps with large number of states.
- offers centralised state management system
- reduces code complexity
- makes state management easier
- enhances performance
- helps in effortless debugging.

ADVANTAGES OF USING REDUX
- enhances state prediction factor
- helps maintenance, testing, and debugging
- oprimizes performance
- provides practical library for server-side rendering.
- enables sharing data between two components without providing any state or method
- enables managing app state in a single place
- enable access to same app state to multiple components

USES OF REDUX
- manages state in spa, desktop apps via electron, react native apps.
- helps in caching page state
- manages state in components/global components
- refactors components
- shares state with multiple container components.

ESSENTIAL CONCEPTS OF REDUX
- centralized state management system: single stores
- component's properties are immutable.
Action(updates)->State(Re-renders)->Component(Updates)->Component properties(Display)->Result
    * Actions - what the app can do
        . events fired by selecting a radio button, checkbox, or clicking a button
        . json objects contaning info about changes needed to be made to a state
        . produced by functions called action creators
        . contains type of action, time of occurence, and which states it aims to change.

        Actions are:
        . dispatched by various part of the app and received by the stores
        . javascript objects that described what happened
        . sent to store to update the app state
        . described by the type field that is constant
    * Store - single location & authoritative soure of the app state
        . contains the redux app state
        . an object that contains state, functions, and objects
        . can dispatch and receive actions
        . provides subscription to store update
        . holds the entire app list in the form of the 'state tree'
    * Reducers - actions which reture the new state.
        . receives actions from the store
        . makes appropriate changes to the state
        . pure functions that receives current state and an action
        . acts as an event listener, reads the action payloads, and updates store
        . takes two parameters, previous app state and action, returns new app state.

ASYNC WITH REDUX
Sync and Async 
- Sync
    . runs in sequence from top to bottom
    . each operation waits for the previous to complete.
- Async
    . runs in parallel
    . operation can occur whil another is still being processed.
    . preferable when execution can be blocked indefinitely
    . page remains responsive
    . javascript code executes functions concurrently.

why Async in redux?
the flow of Redux's state management task is completely synchronous
* how can async actions be enabled?
* how can state transitions be enabled?
* how can the app state be integrated with data generated by an asynchronous action?

Introducing middleware
. in redux, actions and reducers complement the app architecture
. to use asynchronous operations, actions and reducers are not enough.
. we can use middleware to interact with the asynchronous data in react redux app.

Middleware techniques
1. Thunk
    . allows passing functions withing action creators to create async redux
    . allows writing action creators
    . allows dispatch delay of action
    . allows dispatching an action
    . passes dispatch() and getState() as parameters to the function
    
    * Advantages
        . suitable for simple apps
        . enables async ops withhout lot of boilerplate code
        . easy to setup and implement (less learning curve)
    * Disadvantages
        . cannot act in response to an action
        . difficult to handle concurrency problems that may occur
        . imperative (not very easy to test)
        . does nit scale well.
2. Saga
    . uses es6 feature called generators to enable async ops
    . exposes a set of helper functions to create declarative javascript objects
    . handles the objects yielded in the backend.

    * Pros
        . allows expressing complex logic as pure functions
        . easy to test 'cos of predictability, allows separation of concerns
        . can be time-travelled
        . makes it easier to scale complex apps
        . easier to catch errors and hanlde filures
        . well documented. 
    * Cons
        . not very suitable for simple apps
        . needs more bilerplate code
        . need to have the knowledge of generators
        . high learing curve.
3. Promised-based
4. Async/Await

Choosing middleware
* Thunk is preferable because:
    . communication with actions can be acheived before reaching the reducer
    . many use cases around practical web apps
    . easy to understand for first time learners of redux

BINDING REDUX AND FLOW 
state change:
- triggers the re-rendering of DOM in react
- involves transfer of data and long chain of props
- requires state management done by redux
- managed in react redux using a single store and reducers
- is easier in redux.

Redux building blocks
- central store
- actions (type, payload)
- reducer - recievs the whole state and action as input.
- subscription

Data flow (uni-directional)
why? - two-way binding affected browser performance and it was difficult to track data flow, thus one-way data flow in redux solved the problem.

Advantages of data flow in redux
- easier to manage state when actons on UI and update of state are separate.
- enables reuse of comntainers, actions, and reducers in react native.

The store management with redux has 3 main components:

Actions - are blocks of information that send data from your application to your store. Actions must have a type property that indicates the type of action being performed.

Reducers -Reducers specify how the applicationâ€™s state changes in response to actions sent to the store.

Store -The Store is the object that brings the action and reducer together. The store has the following responsibilities: Holds application state; Allows access to state; Allows state to be updated via dispatch(action);

Term	Definition
Actions	JSON objects that contain information about changes that need to be made to the state.
Action creators	Functions that create actions.
Asynchronous or async code	Runs in parallel, and an operation can occur while another one is still being processed.
Central Store	holds the entire application list in the form of the 'state tree'.
Custom Hook	A new composition of one or multiple Hooks.
Controlled input	Use React to fully control the element by setting and updating the input value directly.
onChange	Attribute that controls changes in the form
Hooks	Enable functional components to attach local state with it, and this state will be preserved by React when the component re-renders.
Middleware	Used to interact with asynchronous data in your React Redux app.
NPM	Package manager for the Node JavaScript platform.
Payload property	An optional property that contains some data that is required to perform a task.
React Hook form	A form state management and validation library for React web-based applications and React Native mobile applications.
Reducer	Pure functions that receive the current state and an Action object and return a new state with the actions performed.
Redux	A state management library that is often used with React to handle the state of your application.
Ref function	Used to get the form values from DOM.
Redux Thunk	Middleware that allows to pass functions within action creators to create async Redux.
Redux Saga	Middleware that uses an ES6 feature called Generators to enable async operations.
Store	Contains the Redux application's current state, other functions, and objects.
setState	Updates state of the form input elements.
Synchronous or sync code	Runs in sequence from top to bottom, and each operation must wait for the previous one to complete before executing.
Subscription	Is triggered in the components whenever the state is updated in the store.
Type property	A string that identifies the action.
useState	A hook that allows you to use state in your function. It adds state to a function component.
useEffect	Manages side effects such as document changes, HTTP, and so on.
useContext	Manages context changes and provides the component with access to a context.
useReducer	Manages Redux state changes.
Uncontrolled input	Allows the browser to handle most of the form elements and collect data through React's change events.

Package/Method	Description	Code Example
Hooks	Functions called hooks enable "hooking into" features of the React state and lifecycle from function components.	
1
2
3
4
5
6
7
importReact,{useState}from 'react';
function CntApp() { 
const[count,setCount]=useState(0);
return(Youclicked{count}many times
<buttononClick={()=>setCount(count+1)}>Clickme</button>
);}
export default CntApp;
Copied!
React Forms	React makes use of forms to enable user interaction with the website.	
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
import React, {Component} from "react";
export default functionApp() {
const [email, setEmail] = React.useState("");
const [password, setPassword] = React.useState("");
const handleSubmit = (event) => {
console.log(`Email: ${email}Password: ${password}`);
event.preventDefault();
}
return ( < formonSubmit = {
handleSubmit
} > 
< h1 > Registration < /h1>
<label> Email:< input name="email" type="email" value={email}
onChange={e => setEmail(e.target.value)} required/ > < /label>
<label>Password:<input name="password" type="password" value={password}
onChange={e => setPassword(e.target.value)}required/></label>
<button>Submit</button>
</form>);
Copied!
Redux	Redux is a state management library that is often used with React to handle the state of your application. An application state is like a global object which holds information that you use for various purposes later in the app.	
1
  $ npm install redux react-redux --save 